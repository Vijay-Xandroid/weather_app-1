// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN", "IMPLICIT_NOTHING_TYPE_ARGUMENT_IN_RETURN_POSITION")

package com.vita.weatherforecast.`data`.remote.response

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.Types
import com.squareup.moshi.`internal`.Util
import java.lang.NullPointerException
import java.lang.reflect.Constructor
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List
import kotlin.collections.emptySet
import kotlin.jvm.Volatile
import kotlin.text.buildString

public class WeatherLocationResponseJsonAdapter(
  moshi: Moshi,
) : JsonAdapter<WeatherLocationResponse>() {
  private val options: JsonReader.Options = JsonReader.Options.of("city", "cnt", "cod", "list",
      "message")

  private val nullableCityAdapter: JsonAdapter<City?> = moshi.adapter(City::class.java, emptySet(),
      "city")

  private val nullableIntAdapter: JsonAdapter<Int?> = moshi.adapter(Int::class.javaObjectType,
      emptySet(), "cnt")

  private val nullableStringAdapter: JsonAdapter<String?> = moshi.adapter(String::class.java,
      emptySet(), "cod")

  private val nullableListOfWeatherListAdapter: JsonAdapter<List<WeatherList>?> =
      moshi.adapter(Types.newParameterizedType(List::class.java, WeatherList::class.java),
      emptySet(), "list")

  @Volatile
  private var constructorRef: Constructor<WeatherLocationResponse>? = null

  override fun toString(): String = buildString(45) {
      append("GeneratedJsonAdapter(").append("WeatherLocationResponse").append(')') }

  override fun fromJson(reader: JsonReader): WeatherLocationResponse {
    var city: City? = null
    var cnt: Int? = null
    var cod: String? = null
    var list: List<WeatherList>? = null
    var message: Int? = null
    var mask0 = -1
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> city = nullableCityAdapter.fromJson(reader)
        1 -> cnt = nullableIntAdapter.fromJson(reader)
        2 -> cod = nullableStringAdapter.fromJson(reader)
        3 -> {
          list = nullableListOfWeatherListAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 3).inv()
          mask0 = mask0 and 0xfffffff7.toInt()
        }
        4 -> message = nullableIntAdapter.fromJson(reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    if (mask0 == 0xfffffff7.toInt()) {
      // All parameters with defaults are set, invoke the constructor directly
      return  WeatherLocationResponse(
          city = city,
          cnt = cnt,
          cod = cod,
          list = list,
          message = message
      )
    } else {
      // Reflectively invoke the synthetic defaults constructor
      @Suppress("UNCHECKED_CAST")
      val localConstructor: Constructor<WeatherLocationResponse> = this.constructorRef ?:
          WeatherLocationResponse::class.java.getDeclaredConstructor(City::class.java,
          Int::class.javaObjectType, String::class.java, List::class.java,
          Int::class.javaObjectType, Int::class.javaPrimitiveType,
          Util.DEFAULT_CONSTRUCTOR_MARKER).also { this.constructorRef = it }
      return localConstructor.newInstance(
          city,
          cnt,
          cod,
          list,
          message,
          mask0,
          /* DefaultConstructorMarker */ null
      )
    }
  }

  override fun toJson(writer: JsonWriter, value_: WeatherLocationResponse?) {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("city")
    nullableCityAdapter.toJson(writer, value_.city)
    writer.name("cnt")
    nullableIntAdapter.toJson(writer, value_.cnt)
    writer.name("cod")
    nullableStringAdapter.toJson(writer, value_.cod)
    writer.name("list")
    nullableListOfWeatherListAdapter.toJson(writer, value_.list)
    writer.name("message")
    nullableIntAdapter.toJson(writer, value_.message)
    writer.endObject()
  }
}
