// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN", "IMPLICIT_NOTHING_TYPE_ARGUMENT_IN_RETURN_POSITION")

package com.vita.weatherforecast.domain.model

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import java.lang.NullPointerException
import kotlin.Double
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.collections.emptySet
import kotlin.text.buildString

public class WindDomainJsonAdapter(
  moshi: Moshi,
) : JsonAdapter<WindDomain>() {
  private val options: JsonReader.Options = JsonReader.Options.of("deg", "gust", "speed")

  private val nullableIntAdapter: JsonAdapter<Int?> = moshi.adapter(Int::class.javaObjectType,
      emptySet(), "deg")

  private val nullableDoubleAdapter: JsonAdapter<Double?> =
      moshi.adapter(Double::class.javaObjectType, emptySet(), "gust")

  override fun toString(): String = buildString(32) {
      append("GeneratedJsonAdapter(").append("WindDomain").append(')') }

  override fun fromJson(reader: JsonReader): WindDomain {
    var deg: Int? = null
    var gust: Double? = null
    var speed: Double? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> deg = nullableIntAdapter.fromJson(reader)
        1 -> gust = nullableDoubleAdapter.fromJson(reader)
        2 -> speed = nullableDoubleAdapter.fromJson(reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return WindDomain(
        deg = deg,
        gust = gust,
        speed = speed
    )
  }

  override fun toJson(writer: JsonWriter, value_: WindDomain?) {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("deg")
    nullableIntAdapter.toJson(writer, value_.deg)
    writer.name("gust")
    nullableDoubleAdapter.toJson(writer, value_.gust)
    writer.name("speed")
    nullableDoubleAdapter.toJson(writer, value_.speed)
    writer.endObject()
  }
}
