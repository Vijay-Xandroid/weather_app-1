// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN", "IMPLICIT_NOTHING_TYPE_ARGUMENT_IN_RETURN_POSITION")

package com.vita.weatherforecast.domain.model

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.Types
import java.lang.NullPointerException
import kotlin.Double
import kotlin.Int
import kotlin.Long
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List
import kotlin.collections.emptySet
import kotlin.text.buildString

public class WeatherListDomainJsonAdapter(
  moshi: Moshi,
) : JsonAdapter<WeatherListDomain>() {
  private val options: JsonReader.Options = JsonReader.Options.of("clouds", "dt", "dt_txt", "main",
      "pop", "rain", "sys", "visibility", "weather", "wind")

  private val nullableCloudsDomainAdapter: JsonAdapter<CloudsDomain?> =
      moshi.adapter(CloudsDomain::class.java, emptySet(), "clouds")

  private val nullableLongAdapter: JsonAdapter<Long?> = moshi.adapter(Long::class.javaObjectType,
      emptySet(), "dt")

  private val nullableStringAdapter: JsonAdapter<String?> = moshi.adapter(String::class.java,
      emptySet(), "dtTxt")

  private val nullableMainDomainAdapter: JsonAdapter<MainDomain?> =
      moshi.adapter(MainDomain::class.java, emptySet(), "main")

  private val nullableDoubleAdapter: JsonAdapter<Double?> =
      moshi.adapter(Double::class.javaObjectType, emptySet(), "pop")

  private val nullableRainDomainAdapter: JsonAdapter<RainDomain?> =
      moshi.adapter(RainDomain::class.java, emptySet(), "rain")

  private val nullableSysDomainAdapter: JsonAdapter<SysDomain?> =
      moshi.adapter(SysDomain::class.java, emptySet(), "sys")

  private val nullableIntAdapter: JsonAdapter<Int?> = moshi.adapter(Int::class.javaObjectType,
      emptySet(), "visibility")

  private val nullableListOfWeatherDomainAdapter: JsonAdapter<List<WeatherDomain>?> =
      moshi.adapter(Types.newParameterizedType(List::class.java, WeatherDomain::class.java),
      emptySet(), "weather")

  private val nullableWindDomainAdapter: JsonAdapter<WindDomain?> =
      moshi.adapter(WindDomain::class.java, emptySet(), "wind")

  override fun toString(): String = buildString(39) {
      append("GeneratedJsonAdapter(").append("WeatherListDomain").append(')') }

  override fun fromJson(reader: JsonReader): WeatherListDomain {
    var clouds: CloudsDomain? = null
    var dt: Long? = null
    var dtTxt: String? = null
    var main: MainDomain? = null
    var pop: Double? = null
    var rain: RainDomain? = null
    var sys: SysDomain? = null
    var visibility: Int? = null
    var weather: List<WeatherDomain>? = null
    var wind: WindDomain? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> clouds = nullableCloudsDomainAdapter.fromJson(reader)
        1 -> dt = nullableLongAdapter.fromJson(reader)
        2 -> dtTxt = nullableStringAdapter.fromJson(reader)
        3 -> main = nullableMainDomainAdapter.fromJson(reader)
        4 -> pop = nullableDoubleAdapter.fromJson(reader)
        5 -> rain = nullableRainDomainAdapter.fromJson(reader)
        6 -> sys = nullableSysDomainAdapter.fromJson(reader)
        7 -> visibility = nullableIntAdapter.fromJson(reader)
        8 -> weather = nullableListOfWeatherDomainAdapter.fromJson(reader)
        9 -> wind = nullableWindDomainAdapter.fromJson(reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return WeatherListDomain(
        clouds = clouds,
        dt = dt,
        dtTxt = dtTxt,
        main = main,
        pop = pop,
        rain = rain,
        sys = sys,
        visibility = visibility,
        weather = weather,
        wind = wind
    )
  }

  override fun toJson(writer: JsonWriter, value_: WeatherListDomain?) {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("clouds")
    nullableCloudsDomainAdapter.toJson(writer, value_.clouds)
    writer.name("dt")
    nullableLongAdapter.toJson(writer, value_.dt)
    writer.name("dt_txt")
    nullableStringAdapter.toJson(writer, value_.dtTxt)
    writer.name("main")
    nullableMainDomainAdapter.toJson(writer, value_.main)
    writer.name("pop")
    nullableDoubleAdapter.toJson(writer, value_.pop)
    writer.name("rain")
    nullableRainDomainAdapter.toJson(writer, value_.rain)
    writer.name("sys")
    nullableSysDomainAdapter.toJson(writer, value_.sys)
    writer.name("visibility")
    nullableIntAdapter.toJson(writer, value_.visibility)
    writer.name("weather")
    nullableListOfWeatherDomainAdapter.toJson(writer, value_.weather)
    writer.name("wind")
    nullableWindDomainAdapter.toJson(writer, value_.wind)
    writer.endObject()
  }
}
